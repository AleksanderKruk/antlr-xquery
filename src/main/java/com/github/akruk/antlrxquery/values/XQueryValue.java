package com.github.akruk.antlrxquery.values;

import java.math.BigDecimal;
import java.util.List;
import org.antlr.v4.runtime.tree.ParseTree;

import com.github.akruk.antlrxquery.exceptions.XQueryUnsupportedOperation;
import com.github.akruk.antlrxquery.values.factories.XQueryValueFactory;

public interface XQueryValue {
    public XQueryValue copy();
    public XQueryValue empty();
    public ParseTree node();
    public BigDecimal numericValue();
    public String stringValue();
    public Boolean booleanValue();
    public XQueryFunction functionValue();
    public Boolean effectiveBooleanValue();
    public List<XQueryValue> sequence();
    public XQueryValue reference();
    public boolean isNumericValue();
    public boolean isStringValue();
    public boolean isBooleanValue();
    public boolean isSequence();
    public boolean isReference();
    public boolean isAtomic();
    public boolean isNode();
    public boolean isFunction();
    public List<XQueryValue> atomize();
    public XQueryValue not(XQueryValueFactory valueFactory) throws XQueryUnsupportedOperation;
    public XQueryValue and(XQueryValueFactory valueFactory, XQueryValue other) throws XQueryUnsupportedOperation;
    public XQueryValue or(XQueryValueFactory valueFactory, XQueryValue other) throws XQueryUnsupportedOperation;
    public XQueryValue add(XQueryValueFactory valueFactory, XQueryValue other) throws XQueryUnsupportedOperation;
    public XQueryValue subtract(XQueryValueFactory valueFactory, XQueryValue other) throws XQueryUnsupportedOperation;
    public XQueryValue multiply(XQueryValueFactory valueFactory, XQueryValue other) throws XQueryUnsupportedOperation;
    public XQueryValue divide(XQueryValueFactory valueFactory, XQueryValue other) throws XQueryUnsupportedOperation;
    public XQueryValue integerDivide(XQueryValueFactory valueFactory, XQueryValue other) throws XQueryUnsupportedOperation;
    public XQueryValue modulus(XQueryValueFactory valueFactory, XQueryValue other) throws XQueryUnsupportedOperation;
    public XQueryValue concatenate(XQueryValueFactory valueFactory, XQueryValue other) throws XQueryUnsupportedOperation;
    public XQueryValue valueEqual(XQueryValueFactory valueFactory, XQueryValue other);
    public XQueryValue valueUnequal(XQueryValueFactory valueFactory, XQueryValue other);
    public XQueryValue valueLessThan(XQueryValueFactory valueFactory, XQueryValue other);
    public XQueryValue valueLessEqual(XQueryValueFactory valueFactory, XQueryValue other);
    public XQueryValue valueGreaterThan(XQueryValueFactory valueFactory, XQueryValue other);
    public XQueryValue valueGreaterEqual(XQueryValueFactory valueFactory, XQueryValue other);
    public XQueryValue generalEqual(XQueryValueFactory valueFactory, XQueryValue other);
    public XQueryValue generalUnequal(XQueryValueFactory valueFactory, XQueryValue other);
    public XQueryValue generalLessThan(XQueryValueFactory valueFactory, XQueryValue other);
    public XQueryValue generalLessEqual(XQueryValueFactory valueFactory, XQueryValue other);
    public XQueryValue generalGreaterThan(XQueryValueFactory valueFactory, XQueryValue other);
    public XQueryValue generalGreaterEqual(XQueryValueFactory valueFactory, XQueryValue other);
    public XQueryValue union(XQueryValueFactory valueFactory, XQueryValue otherSequence) throws XQueryUnsupportedOperation;
    public XQueryValue intersect(XQueryValueFactory valueFactory, XQueryValue otherSequence) throws XQueryUnsupportedOperation;
    public XQueryValue except(XQueryValueFactory valueFactory, XQueryValue other) throws XQueryUnsupportedOperation;
    public XQueryValue head(XQueryValueFactory valueFactory) throws XQueryUnsupportedOperation;
    public XQueryValue tail(XQueryValueFactory valueFactory) throws XQueryUnsupportedOperation;
    public XQueryValue insertBefore(XQueryValueFactory valueFactory, XQueryValue position, XQueryValue inserted) throws XQueryUnsupportedOperation;
    public XQueryValue insertAfter(XQueryValueFactory valueFactory, XQueryValue position, XQueryValue inserted) throws XQueryUnsupportedOperation;
    public XQueryValue remove(XQueryValueFactory valueFactory, XQueryValue position) throws XQueryUnsupportedOperation;
    public XQueryValue reverse(XQueryValueFactory valueFactory) throws XQueryUnsupportedOperation;
    public XQueryValue subsequence(XQueryValueFactory valueFactory, int startingLoc) throws XQueryUnsupportedOperation;
    public XQueryValue subsequence(XQueryValueFactory valueFactory, int startingLoc, int length) throws XQueryUnsupportedOperation;
    public XQueryValue distinctValues(XQueryValueFactory valueFactory) throws XQueryUnsupportedOperation;
    public XQueryValue zeroOrOne(XQueryValueFactory valueFactory) throws XQueryUnsupportedOperation;
    public XQueryValue oneOrMore(XQueryValueFactory valueFactory) throws XQueryUnsupportedOperation;
    public XQueryValue exactlyOne(XQueryValueFactory valueFactory) throws XQueryUnsupportedOperation;
    public XQueryValue data(XQueryValueFactory valueFactory) throws XQueryUnsupportedOperation;
    public XQueryValue contains(XQueryValueFactory valueFactory, XQueryValue other) throws XQueryUnsupportedOperation;
    public XQueryValue startsWith(XQueryValueFactory valueFactory, XQueryValue other) throws XQueryUnsupportedOperation;
    public XQueryValue endsWith(XQueryValueFactory valueFactory, XQueryValue other) throws XQueryUnsupportedOperation;
    public XQueryValue uppercase(XQueryValueFactory valueFactory) throws XQueryUnsupportedOperation;
    public XQueryValue lowercase(XQueryValueFactory valueFactory) throws XQueryUnsupportedOperation;
    public XQueryValue substring(XQueryValueFactory valueFactory, int startingLoc) throws XQueryUnsupportedOperation;
    public XQueryValue substring(XQueryValueFactory valueFactory, int startingLoc, int length) throws XQueryUnsupportedOperation;
    public XQueryValue substringBefore(XQueryValueFactory valueFactory, XQueryValue splitstring) throws XQueryUnsupportedOperation;
    public XQueryValue substringAfter(XQueryValueFactory valueFactory, XQueryValue splitstring) throws XQueryUnsupportedOperation;
}
