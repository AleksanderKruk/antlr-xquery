package com.github.akruk.antlrxquery.values;

import java.math.BigDecimal;
import java.util.List;
import org.antlr.v4.runtime.tree.ParseTree;


public interface XQueryValue {
    public ParseTree node();
    public BigDecimal numericValue();
    public String stringValue();
    public Boolean booleanValue();
    public XQueryFunction functionValue();
    public Boolean effectiveBooleanValue();
    public List<XQueryValue> sequence();
    public boolean isNumericValue();
    public boolean isStringValue();
    public boolean isBooleanValue();
    public boolean isSequence();
    public boolean isAtomic();
    public boolean isNode();
    public boolean isFunction();
    public boolean isError();
    public List<XQueryValue> atomize();
    public XQueryValue empty();
    public XQueryValue not();
    public XQueryValue and(XQueryValue other);
    public XQueryValue or(XQueryValue other);
    public XQueryValue add(XQueryValue other);
    public XQueryValue subtract(XQueryValue other);
    public XQueryValue multiply(XQueryValue other);
    public XQueryValue divide(XQueryValue other);
    public XQueryValue integerDivide(XQueryValue other);
    public XQueryValue modulus(XQueryValue other);
    public XQueryValue concatenate(XQueryValue other);
    public XQueryValue valueEqual(XQueryValue other);
    public XQueryValue valueUnequal(XQueryValue other);
    public XQueryValue valueLessThan(XQueryValue other);
    public XQueryValue valueLessEqual(XQueryValue other);
    public XQueryValue valueGreaterThan(XQueryValue other);
    public XQueryValue valueGreaterEqual(XQueryValue other);
    public XQueryValue generalEqual(XQueryValue other);
    public XQueryValue generalUnequal(XQueryValue other);
    public XQueryValue generalLessThan(XQueryValue other);
    public XQueryValue generalLessEqual(XQueryValue other);
    public XQueryValue generalGreaterThan(XQueryValue other);
    public XQueryValue generalGreaterEqual(XQueryValue other);
    public XQueryValue union(XQueryValue otherSequence);
    public XQueryValue intersect(XQueryValue otherSequence);
    public XQueryValue except(XQueryValue other);
    public XQueryValue head();
    public XQueryValue tail();
    public XQueryValue insertBefore(XQueryValue position, XQueryValue inserted);
    public XQueryValue insertAfter(XQueryValue position, XQueryValue inserted);
    public XQueryValue remove(XQueryValue position);
    public XQueryValue reverse();
    public XQueryValue subsequence(int startingLoc);
    public XQueryValue subsequence(int startingLoc, int length);
    public XQueryValue distinctValues();
    public XQueryValue data();
    public boolean isEmptySequence();
}
